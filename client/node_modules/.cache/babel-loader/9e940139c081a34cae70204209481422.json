{"ast":null,"code":"import _classCallCheck from \"/home/esdras/Documentos/frontend-store-jwt/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/esdras/Documentos/frontend-store-jwt/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport history from \"../history\";\nimport auth0 from \"auth0-js\";\nimport { AUTH_CONFIG } from \"./auth0-variables\";\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      audience: AUTH_CONFIG.apiURL,\n      responseType: \"token id_token\",\n      scope: \"read:productos\"\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n        } else if (err) {\n          history.replace(\"/productos\");\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      //const accessToken = localStorage.getItem(\"access_token\");\n      //if (!accessToken) return new Error(\"Hubo un error de authenticacion\");\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem(\"isLoggedIn\", \"true\"); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n\n      history.replace(\"/productos\");\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem(\"isLoggedIn\");\n      this.auth0.logout({\n        return_to: window.location.origin\n      }); // navigate to the home route\n\n      history.replace(\"/productos\");\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/home/esdras/Documentos/frontend-store-jwt/client/src/Auth/Auth.js"],"names":["history","auth0","AUTH_CONFIG","Auth","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","audience","apiURL","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem","return_to","window","location","origin"],"mappings":"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","sourcesContent":["import history from \"../history\";\nimport auth0 from \"auth0-js\";\nimport { AUTH_CONFIG } from \"./auth0-variables\";\n\nexport default class Auth {\n  accessToken;\n  idToken;\n  expiresAt;\n\n  auth0 = new auth0.WebAuth({\n    domain: AUTH_CONFIG.domain,\n    clientID: AUTH_CONFIG.clientId,\n    redirectUri: AUTH_CONFIG.callbackUrl,\n    audience: AUTH_CONFIG.apiURL,\n    responseType: \"token id_token\",\n    scope: \"read:productos\"\n  });\n\n  constructor() {\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        history.replace(\"/productos\");\n        console.log(err);\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n\n  getAccessToken() {\n    //const accessToken = localStorage.getItem(\"access_token\");\n    //if (!accessToken) return new Error(\"Hubo un error de authenticacion\");\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n\n    // Set the time that the access token will expire at\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt;\n\n    // navigate to the home route\n    history.replace(\"/productos\");\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(\n          `Could not get a new token (${err.error}: ${err.error_description}).`\n        );\n      }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem(\"isLoggedIn\");\n\n    this.auth0.logout({\n      return_to: window.location.origin\n    });\n\n    // navigate to the home route\n    history.replace(\"/productos\");\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}